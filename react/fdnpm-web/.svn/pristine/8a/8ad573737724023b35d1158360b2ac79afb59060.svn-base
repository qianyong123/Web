import React, { PureComponent } from 'react'
import { string, object, func, bool } from 'prop-types'
import {
  Button,
  Form,
  Input,
  Modal,
  Select,
  Card,
  Row,
  Col,
  Upload,
  message,
  Icon,
} from 'antd'
import Cookies from 'js-cookie'

import globalStyles from '@/global.less'
// import styles from './index.less'
import moment from 'moment'

const { TextArea } = Input
const { Option } = Select

const FORM_ITEM_LAYOUT = {
  labelCol: {
    span: 6,
  },
  wrapperCol: {
    span: 18,
  },
}

const LONG_FORM_ITEM_LAYOUT = {
  labelCol: {
    span: 3,
  },
  wrapperCol: {
    span: 21,
  },
}

const beforeUpload = file => {
  const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png'
  if (!isJpgOrPng) {
    message.error('上传文件格式需为jpg、png!')
  }
  const isLt10M = file.size / 1024 / 1024 < 10
  if (!isLt10M) {
    message.error('文件尺寸不能大于10MB！')
  }
  return isJpgOrPng && isLt10M
}

@Form.create({
  mapPropsToFields({ item: { discoveredDate, ...rest } = {} }) {
    const { createFormField } = Form

    const firld = {}
    Object.keys(rest).map((i) => {
      firld[i] = createFormField({ value: rest[i] })
      // return i
    })

    return {
      discoveredDate: createFormField({
        value: discoveredDate ? moment(discoveredDate) : undefined,
      }),
      ...firld,
    }

  },
})
class FormComp extends PureComponent {
  static propTypes = {
    title: string.isRequired,
    modalVisible: bool.isRequired,
    form: object.isRequired,
    submitForm: func.isRequired,
    onCancelClick: func.isRequired,
  }

  static defaultProps = {
    item: {},
  }

  state = { loading: false }

  normFile = e => {
    let filePaths = []
    if (e && e.fileList) {
      filePaths = e.fileList.map(item => {
        const newItem = { ...item }
        if (newItem.response) {
          const {
            data: { filePath, id },
          } = newItem.response
          newItem.url = filePath
          newItem.id = id
        }
        return { ...newItem }
      })
    }
    return filePaths
  }

  handleSubmit = e => {
    e.preventDefault()

    const { form, item, submitForm } = this.props

    return form.validateFieldsAndScroll((err, values) => {
      // console.log(values)
      if (!err) {
        const { files, ...rest } = values
        const newValues = { ...rest }
        if (files && files.length > 0) {
          newValues.photoIds = files.map(file => file.id).join(',')
          newValues.photoUrls = files.map(file => file.url).join(',')
        }
        // console.log(newValues)
        submitForm(item.id, newValues)
      }
    })
  }

  getFileList = () => {
    const {
      item: { photoIds = '', photoUrls = '' },
    } = this.props
    const url = photoUrls ? photoUrls.split(',') : []
    const id = photoIds ? photoIds.split(',') : []
    // console.log(url)
    const list = id.map((photo, index) => {
      return {
        fileName: '',
        filePath: url[index],
        fileSize: '',
        fileType: '',
        id: photo,
        uid: photo,
        status: 'done',
        url: url[index],
      }
    })
    // console.log(list)
    return list
  }

  render() {
    const {
      form,
      title,
      modalVisible,
      onCancelClick,
      modalType,
      addBtnLoading,
      chinaProtectLevel,
      iucnRank,
      // IUCNLevel,
      // convAppendixRank,
    } = this.props
    const { loading } = this.state
    const { getFieldDecorator, getFieldValue } = form
    const readOnly = modalType === 'view'
    const uploadButton = (
      <div>
        <Icon type={loading ? 'loading' : 'plus'} style={{ color: '#03B472', fontSize: '36px' }}/>
      </div>
    )
    const flag = true
    return (
      <Modal
        destroyOnClose
        footer={false}
        title={title}
        visible={modalVisible}
        onOk={this.handleOk}
        onCancel={onCancelClick}
        width="900px"
      >
        <Form {...FORM_ITEM_LAYOUT} className={globalStyles.modalForm} onSubmit={this.handleSubmit}>
          <Card bordered={false}>
            <Row gutter={16}>
              <Col span={12}>
                <Form.Item label="中文名">
                  {getFieldDecorator('chineseName', {
                    rules: [
                      {
                        required: flag,
                        message: '中文名不能为空',
                        whitespace:true
                      },
                    ],
                  })(<Input placeholder="请填写中文名" readOnly={readOnly}/>)}
                </Form.Item>
              </Col>
              <Col span={12}>
                <Form.Item label="学名">
                  {getFieldDecorator('standardName', {
                    rules: [
                      {
                        required: flag,
                        message: '学名不能为空',
                      },
                    ],
                  })(<Input placeholder="请填写学名" readOnly={readOnly}/>)}
                </Form.Item>
              </Col>
            </Row>
            <Row gutter={16}>
              <Col span={12}>
                <Form.Item label="英文名">
                  {getFieldDecorator('englishName', {
                    rules: [
                      {
                        required: flag,
                        message: '英文名不能为空',
                      },
                    ],
                  })(<Input placeholder="请填写英文名" readOnly={readOnly}/>)}
                </Form.Item>
              </Col>
              <Col span={12}>
                <Form.Item label="俗名">
                  {getFieldDecorator('generalName', {
                    rules: [
                      {
                        required: flag,
                        message: '俗名不能为空',
                      },
                    ],
                  })(<Input placeholder="请填写俗名" readOnly={readOnly}/>)}
                </Form.Item>
              </Col>
            </Row>
            <Row gutter={16}>
              <Col span={24}>
                <Form.Item label="种属" {...LONG_FORM_ITEM_LAYOUT}>
                  <Row gutter={16}>
                    <Col span={8}>
                      {getFieldDecorator('ordoCategory', {
                        rules: [
                          {
                            required: flag,
                            message: '物种目类不能为空',
                          },
                        ],
                      })(<Input addonAfter="目" readOnly={readOnly}/>)}
                    </Col>
                    <Col span={8}>
                      {getFieldDecorator('familiaCategory', {
                        rules: [
                          {
                            required: flag,
                            message: '物种科类不能为空',
                          },
                        ],
                      })(<Input addonAfter="科" readOnly={readOnly}/>)}
                    </Col>
                    <Col span={8}>
                      {getFieldDecorator('genusCategory', {
                        rules: [
                          {
                            required: flag,
                            message: '物种属类不能为空',
                          },
                        ],
                      })(<Input addonAfter="属" readOnly={readOnly}/>)}
                    </Col>
                  </Row>
                </Form.Item>
              </Col>
            </Row>
            <Row gutter={16}>
              <Col span={12}>
                <Form.Item label="中国保护级别">
                  {getFieldDecorator('chinaProtectRankName', {
                    rules: [
                      {
                        required: flag,
                        message: '中国保护级别不能为空',
                      },
                    ],
                  })(
                    <Select allowClear placeholder="请选择中国保护等级" style={{ width: '100%' }}>
                      {chinaProtectLevel.map(item => (
                        <Option key={item.id} value={item.chinaProtectRankName}>
                          {item.chinaProtectRankName}
                        </Option>
                      ))}
                    </Select>,
                  )}
                </Form.Item>
              </Col>
              <Col span={12}>
                <Form.Item label="IUCN级别">
                  {getFieldDecorator('iucnRankName', {
                    rules: [
                      {
                        required: flag,
                        message: 'IUCN级别不能为空',
                      },
                    ],
                  })(
                    <Select allowClear placeholder="请选择IUCN级别" style={{ width: '100%' }}>
                      {iucnRank.map(item => (
                        <Option key={item.id} value={item.iucnRankName}>
                          {item.iucnRankName}
                        </Option>
                      ))}
                      <Option value='一级'>
                        一级
                      </Option>
                    </Select>,
                  )}
                </Form.Item>
              </Col>
            </Row>
            <Row gutter={16}>
              <Col span={24}>
                <Form.Item label="物种简介" {...LONG_FORM_ITEM_LAYOUT}>
                  {getFieldDecorator('speciesShortDesc', {
                    rules: [
                      {
                        required: flag,
                        message: '物种简介不能为空',
                      },
                    ],
                  })(
                    <TextArea
                      autoSize={{
                        minRows: 4,
                      }}
                      placeholder="请填写物种简介"
                      readOnly={readOnly}
                    />,
                  )}
                </Form.Item>
              </Col>
            </Row>
            <Row gutter={16}>
              <Col span={24}>
                <Form.Item label="形态特征" {...LONG_FORM_ITEM_LAYOUT}>
                  {getFieldDecorator('morphologicalCharacteristics', {
                    rules: [
                      {
                        required: flag,
                        message: '形态特征不能为空',
                      },
                    ],
                  })(
                    <TextArea
                      autoSize={{
                        minRows: 4,
                      }}
                      placeholder="请填写形态特征"
                      readOnly={readOnly}
                    />,
                  )}
                </Form.Item>
              </Col>
            </Row>
            <Row gutter={16}>
              <Col span={24}>
                <Form.Item label="生境及习性" {...LONG_FORM_ITEM_LAYOUT}>
                  {getFieldDecorator('habitual', {
                    rules: [
                      {
                        required: flag,
                        message: '生境及习性不能为空',
                      },
                    ],
                  })(
                    <TextArea
                      autoSize={{
                        minRows: 4,
                      }}
                      placeholder="请填写生境及习性"
                      readOnly={readOnly}
                    />,
                  )}
                </Form.Item>
              </Col>
            </Row>
            <Row gutter={16}>
              <Col span={24}>
                <Form.Item label="地理分布" {...LONG_FORM_ITEM_LAYOUT}>
                  {getFieldDecorator('geographicalDistribution', {
                    rules: [
                      {
                        required: flag,
                        message: '地理分布不能为空',
                      },
                    ],
                  })(
                    <TextArea
                      autoSize={{
                        minRows: 4,
                      }}
                      placeholder="请填写地理分布"
                      readOnly={readOnly}
                    />,
                  )}
                </Form.Item>
              </Col>
            </Row>
            <Row gutter={16}>
              <Col span={24}>
                <Form.Item label="保护现状" {...LONG_FORM_ITEM_LAYOUT}>
                  {getFieldDecorator('protectState', {
                    rules: [
                      {
                        required: flag,
                        message: '保护现状不能为空',
                      },
                    ],
                  })(
                    <TextArea
                      autoSize={{
                        minRows: 4,
                      }}
                      placeholder="请填写保护现状"
                      readOnly={readOnly}
                    />,
                  )}
                </Form.Item>
              </Col>
            </Row>
            <Row gutter={16}>
              <Col span={24}>
                <Form.Item label="照片" {...LONG_FORM_ITEM_LAYOUT}>
                  {getFieldDecorator('files', {
                    initialValue: this.getFileList(),
                    valuePropName: 'fileList',
                    getValueFromEvent: this.normFile,
                    rules: [
                      {
                        required: flag,
                        type: 'array',
                        message: '请选择文件',
                      },
                    ],
                  })(
                    <Upload
                      disabled={readOnly}
                      name="file"
                      listType="picture-card"
                      action="/sys/fileManage/uploadFile"
                      beforeUpload={beforeUpload}
                      headers={{ Authorization: Cookies.get('token') }}
                      multiple={false}
                      showUploadList={{ showPreviewIcon: false, showRemoveIcon: true }}
                      style={{ width: '304px !important' }}
                    >
                      {getFieldValue('files').length < 3 ? uploadButton : null}
                    </Upload>,
                  )}
                </Form.Item>
              </Col>
            </Row>
            <Form.Item style={{ display: 'none' }}>
              {getFieldDecorator('id')(
                <Input readOnly={readOnly}/>,
              )}
            </Form.Item>
          </Card>
          <Form.Item className={globalStyles.modalFormActions}>
            <Button type="primary" htmlType="submit" loading={addBtnLoading}>
              提交
            </Button>
            <Button style={{ marginLeft: '16px' }} onClick={onCancelClick}>
              取消
            </Button>
          </Form.Item>
        </Form>
      </Modal>
    )
  }
}

export default FormComp
